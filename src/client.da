import time
import sys
from src.timer_helper import TimerHelper
class Client(process):
    def setup(client_id, workload):
        output("client setup")
        self.olympus = None
        self.configuration = None
        self.head = None
        self.timers = {}
        self.pending_requests = {}
        self.TIMER_DURATION = 5

    def receive(msg= ('olympus', olympus)):
        self.olympus = olympus
        send(("olympus_received", self), to=self.olympus)

    def receive(msg= ('config', config)):
        self.configuration = config
        """ TODO config validation"""
        self.head = self.configuration[0]

    def fetch_config():
        output("getting config from olympus")
        send(('get_config', self), to=self.olympus)
        await(received(('config',self.configuration)))

    def run():
        output("waiting for olympus to contact...")
        await(received(('olympus', self.olympus)))
        output("client received olympus ", self.olympus)
        fetch_config()
        output("client received config from olympus ", self.configuration)

        workload = workload.split(';')
        for i in range(len(workload)):
            request = workload[i].strip()
            request_id = str(client_id) + '_' + str(i)
            send_request(request_id, request, 0, self.head)
            start_timer(request_id)
            self.pending_requests[request_id] = request
        # wait till done not received
        await(received(('done')))
        output('client run finished!')

    def on_timer_expire(request_id):
        output('timer expired for request_id:', request_id)
        self.timers.pop(request_id, None) # remove timer
        fetch_config()
        for replica in self.configuration:
            request = self.pending_requests[request_id]
            send_request(request_id, request, 1, replica)
        start_timer(request_id)

    def start_timer(request_id):
        timer = TimerHelper()
        timer.start_timer(self.TIMER_DURATION, on_timer_expire, [request_id])
        self.timers[request_id] = timer

    def send_request(request_id, request, is_retrasmitted, recipient):
        output("sending request with id ", request_id, " and request workload ", request)
        send(('request', request_id, request, is_retrasmitted), to=recipient)


def main():
    pass